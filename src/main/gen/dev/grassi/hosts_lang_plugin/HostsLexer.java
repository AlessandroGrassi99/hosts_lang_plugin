/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.grassi.hosts_lang_plugin;

import dev.grassi.hosts_lang_plugin.psi.HostsTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Hosts.flex</tt>
 */
class HostsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HOSTNAME = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\5\1\4\22\0\1\1\2\0\1\2\11\0\1\23\1\6\1\0\1\14\1\13\1\7\2\11"+
    "\1\10\4\12\1\16\6\0\5\15\1\17\32\0\5\21\1\22\24\20\12\0\1\5\242\0\2\5\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\5\1\1\5\1\6"+
    "\2\7\1\10\6\0\1\11\10\0\3\11\6\0\5\11"+
    "\1\0\1\11\5\0\1\11\1\0\4\11\1\0\2\11"+
    "\6\0\4\11\3\0\4\11\3\12\2\0\5\11\4\0"+
    "\2\11\2\12\3\0\6\11\3\0\1\11\2\0\5\11"+
    "\1\0\1\11\3\0\2\11\3\0\12\11\2\0\5\11"+
    "\1\0\4\11\3\0\3\11\2\0\2\11\1\0\1\11"+
    "\3\0\2\11\1\0\2\11\1\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\24\0\50\0\74\0\120\0\50\0\144\0\170"+
    "\0\214\0\240\0\264\0\310\0\334\0\360\0\50\0\u0104"+
    "\0\u0118\0\u012c\0\u0140\0\u0154\0\u0168\0\u017c\0\u0190\0\u01a4"+
    "\0\u01b8\0\u01cc\0\u01e0\0\u01f4\0\u0208\0\u021c\0\u0230\0\u0244"+
    "\0\u0258\0\u026c\0\u0280\0\u0294\0\u02a8\0\u02bc\0\u02d0\0\u02e4"+
    "\0\u02f8\0\u030c\0\u0320\0\u0334\0\u0348\0\u035c\0\u0370\0\u0384"+
    "\0\u0398\0\u03ac\0\u03c0\0\u03d4\0\u03e8\0\u03fc\0\u0410\0\u0424"+
    "\0\u0438\0\u044c\0\u0460\0\u0474\0\u0488\0\u049c\0\u04b0\0\u04c4"+
    "\0\u04d8\0\u04ec\0\u0500\0\u0514\0\u0528\0\u053c\0\u0550\0\u0564"+
    "\0\u0578\0\u058c\0\u05a0\0\u05b4\0\u05c8\0\u05dc\0\u05f0\0\u0604"+
    "\0\u0618\0\u062c\0\u0640\0\u0654\0\u0668\0\u067c\0\u0690\0\u06a4"+
    "\0\u06b8\0\u06cc\0\u06e0\0\u06f4\0\u0708\0\u071c\0\u0730\0\u0744"+
    "\0\50\0\u0758\0\u076c\0\u0780\0\u0794\0\u07a8\0\u07bc\0\u07d0"+
    "\0\u07e4\0\u07f8\0\u080c\0\u0820\0\u0834\0\u0848\0\u085c\0\u0870"+
    "\0\u0884\0\u0898\0\u08ac\0\u08c0\0\u08d4\0\u08e8\0\u08fc\0\u0910"+
    "\0\u0924\0\u0938\0\u094c\0\u0474\0\u0960\0\u0974\0\u0988\0\u099c"+
    "\0\u09b0\0\u09c4\0\u09d8\0\u09ec\0\u0a00\0\u0a14\0\u0a28\0\u0a3c"+
    "\0\u0a50\0\u0a64\0\u0a78\0\u0a8c\0\u0aa0\0\u0ab4\0\u0ac8\0\u0adc"+
    "\0\u0a8c\0\u0af0\0\u0b04\0\50\0\u0b18\0\u0b2c\0\u0b40\0\u0b54"+
    "\0\u0b68\0\u0b7c\0\u0b90\0\u0ba4\0\u0bb8\0\u0bcc\0\u0be0\0\u0bcc"+
    "\0\u0bf4\0\u0c08\0\u0c1c\0\u0c30\0\u0c44\0\u0c58\0\u0c6c\0\u0c80"+
    "\0\u0c94\0\u0ca8\0\u0cbc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\6\1\3\1\10"+
    "\3\11\2\12\1\13\1\14\1\13\1\3\2\13\2\3"+
    "\1\15\1\16\1\17\1\20\1\17\12\3\3\21\1\3"+
    "\25\0\1\4\22\0\3\5\3\0\16\5\3\0\1\6"+
    "\26\0\1\22\1\23\1\24\1\23\1\25\2\23\1\26"+
    "\1\27\1\26\1\0\2\26\7\0\1\22\6\25\1\26"+
    "\1\27\1\26\1\0\2\26\7\0\1\22\6\23\1\26"+
    "\1\27\1\26\1\0\2\26\10\0\7\26\1\27\1\26"+
    "\1\0\2\26\17\0\1\30\6\0\1\15\22\0\3\16"+
    "\3\0\16\16\3\0\1\17\26\0\1\31\6\21\3\0"+
    "\3\21\1\32\7\0\1\33\3\34\2\35\15\0\1\22"+
    "\6\36\1\37\1\27\1\37\1\0\2\37\7\0\1\22"+
    "\3\36\1\37\2\36\1\37\1\27\1\37\1\0\2\37"+
    "\7\0\1\22\7\37\1\27\1\37\1\0\2\37\10\0"+
    "\7\37\1\27\1\37\1\0\2\37\10\0\7\40\1\41"+
    "\1\40\1\0\2\40\10\0\7\42\1\0\1\43\1\0"+
    "\1\42\1\43\10\0\6\21\3\0\3\21\10\0\6\21"+
    "\3\0\3\21\1\32\6\0\1\44\1\34\1\45\1\34"+
    "\1\46\2\34\15\0\1\44\6\46\15\0\1\44\6\34"+
    "\15\0\1\22\7\47\1\27\1\47\1\0\2\47\10\0"+
    "\7\47\1\27\1\47\1\0\2\47\10\0\7\50\1\51"+
    "\1\50\1\0\2\50\10\0\1\52\3\53\2\54\1\55"+
    "\1\0\1\55\1\0\2\55\10\0\7\56\1\57\1\56"+
    "\1\0\2\56\10\0\7\56\1\57\1\60\1\0\1\56"+
    "\1\60\10\0\1\61\3\62\2\63\15\0\1\44\3\46"+
    "\1\0\2\46\15\0\1\44\33\0\1\27\14\0\7\64"+
    "\1\51\1\64\1\0\2\64\10\0\7\65\1\66\1\65"+
    "\1\0\2\65\7\0\1\67\1\70\1\71\1\70\1\72"+
    "\2\70\1\73\1\74\1\73\1\0\2\73\7\0\1\67"+
    "\6\72\1\73\1\74\1\73\1\0\2\73\7\0\1\67"+
    "\6\70\1\73\1\74\1\73\1\0\2\73\10\0\7\73"+
    "\1\74\1\73\1\0\2\73\10\0\7\75\1\57\1\75"+
    "\1\0\2\75\10\0\7\55\1\0\1\55\1\0\2\55"+
    "\10\0\7\75\1\57\1\76\1\0\1\75\1\76\7\0"+
    "\1\77\1\62\1\100\1\62\1\101\2\62\15\0\1\77"+
    "\6\101\15\0\1\77\6\62\16\0\7\102\1\51\1\102"+
    "\1\0\2\102\10\0\7\103\1\104\1\103\1\0\2\103"+
    "\10\0\1\105\3\106\2\107\1\110\1\0\1\110\1\0"+
    "\2\110\10\0\1\111\3\112\2\113\15\0\1\67\6\114"+
    "\1\115\1\74\1\115\1\0\2\115\7\0\1\67\3\114"+
    "\1\115\2\114\1\115\1\74\1\115\1\0\2\115\7\0"+
    "\1\67\7\115\1\74\1\115\1\0\2\115\10\0\7\115"+
    "\1\74\1\115\1\0\2\115\10\0\7\110\1\0\1\110"+
    "\1\0\2\110\10\0\7\116\1\57\1\116\1\0\2\116"+
    "\10\0\7\116\1\57\1\117\1\0\1\116\1\117\10\0"+
    "\1\120\3\121\2\122\15\0\1\77\3\101\1\0\2\101"+
    "\15\0\1\77\33\0\1\51\14\0\7\123\1\104\1\123"+
    "\1\0\2\123\10\0\7\124\1\125\1\124\1\0\2\124"+
    "\7\0\1\67\1\126\1\127\1\126\1\130\2\126\1\131"+
    "\1\132\1\131\1\0\2\131\7\0\1\67\6\130\1\131"+
    "\1\132\1\131\1\0\2\131\7\0\1\67\6\126\1\131"+
    "\1\132\1\131\1\0\2\131\10\0\7\131\1\132\1\131"+
    "\1\0\2\131\7\0\1\133\1\112\1\134\1\112\1\135"+
    "\2\112\15\0\1\133\6\135\15\0\1\133\6\112\15\0"+
    "\1\67\7\136\1\74\1\136\1\0\2\136\10\0\7\136"+
    "\1\74\1\136\1\0\2\136\17\0\1\57\23\0\1\137"+
    "\14\0\1\121\1\140\1\121\1\141\2\121\16\0\6\141"+
    "\16\0\6\121\16\0\7\142\1\104\1\142\1\0\2\142"+
    "\10\0\7\143\1\144\1\143\1\0\2\143\10\0\1\145"+
    "\3\146\2\147\1\150\1\0\1\150\1\0\2\150\7\0"+
    "\1\67\6\151\1\152\1\132\1\152\1\0\2\152\7\0"+
    "\1\67\3\151\1\152\2\151\1\152\1\132\1\152\1\0"+
    "\2\152\7\0\1\67\7\152\1\132\1\152\1\0\2\152"+
    "\10\0\7\152\1\132\1\152\1\0\2\152\10\0\7\150"+
    "\1\0\1\150\1\0\2\150\10\0\1\153\3\154\2\155"+
    "\15\0\1\133\3\135\1\0\2\135\15\0\1\133\33\0"+
    "\1\74\14\0\5\55\1\156\1\55\1\0\1\55\1\0"+
    "\2\55\10\0\3\141\1\0\2\141\25\0\1\104\14\0"+
    "\7\157\1\144\1\157\1\0\2\157\10\0\7\160\1\161"+
    "\1\160\1\0\2\160\7\0\1\67\1\162\1\163\1\162"+
    "\1\164\2\162\1\165\1\166\1\165\1\0\2\165\7\0"+
    "\1\67\6\164\1\165\1\166\1\165\1\0\2\165\7\0"+
    "\1\67\6\162\1\165\1\166\1\165\1\0\2\165\10\0"+
    "\7\165\1\166\1\165\1\0\2\165\7\0\1\67\7\167"+
    "\1\132\1\167\1\0\2\167\10\0\7\167\1\132\1\167"+
    "\1\0\2\167\7\0\1\170\1\154\1\171\1\154\1\172"+
    "\2\154\15\0\1\170\6\172\15\0\1\170\6\154\16\0"+
    "\5\73\1\173\1\73\1\174\1\73\1\0\2\73\10\0"+
    "\7\175\1\144\1\175\1\0\2\175\10\0\7\176\1\177"+
    "\1\176\1\0\2\176\10\0\1\200\3\201\2\202\1\203"+
    "\1\0\1\203\1\0\2\203\7\0\1\67\6\204\1\205"+
    "\1\166\1\205\1\0\2\205\7\0\1\67\3\204\1\205"+
    "\2\204\1\205\1\166\1\205\1\0\2\205\7\0\1\67"+
    "\7\205\1\166\1\205\1\0\2\205\10\0\7\205\1\166"+
    "\1\205\1\0\2\205\10\0\7\203\1\0\1\203\1\0"+
    "\2\203\17\0\1\132\14\0\1\206\3\207\2\210\15\0"+
    "\1\170\3\172\1\0\2\172\15\0\1\170\24\0\5\115"+
    "\1\211\1\115\1\174\1\115\1\0\2\115\17\0\1\144"+
    "\14\0\7\212\1\177\1\212\1\0\2\212\10\0\7\213"+
    "\1\214\1\213\1\0\2\213\7\0\1\67\1\215\1\216"+
    "\1\215\1\217\2\215\1\220\1\221\1\220\1\0\2\220"+
    "\7\0\1\67\6\217\1\220\1\221\1\220\1\0\2\220"+
    "\7\0\1\67\6\215\1\220\1\221\1\220\1\0\2\220"+
    "\10\0\7\220\1\221\1\220\1\0\2\220\7\0\1\67"+
    "\7\222\1\166\1\222\1\0\2\222\10\0\7\222\1\166"+
    "\1\222\1\0\2\222\10\0\1\207\1\223\1\207\1\224"+
    "\2\207\16\0\6\224\16\0\6\207\16\0\5\136\1\225"+
    "\1\136\1\174\1\136\1\0\2\136\10\0\7\226\1\177"+
    "\1\226\1\0\2\226\10\0\7\227\1\230\1\227\1\0"+
    "\2\227\10\0\7\231\1\0\1\231\1\0\2\231\7\0"+
    "\1\67\6\232\1\233\1\221\1\233\1\0\2\233\7\0"+
    "\1\67\3\232\1\233\2\232\1\233\1\221\1\233\1\0"+
    "\2\233\7\0\1\67\7\233\1\221\1\233\1\0\2\233"+
    "\10\0\7\233\1\221\1\233\1\0\2\233\17\0\1\166"+
    "\14\0\3\224\1\0\2\224\25\0\1\174\23\0\1\177"+
    "\14\0\7\234\1\230\1\234\1\0\2\234\10\0\7\235"+
    "\1\236\1\235\1\0\2\235\10\0\7\237\1\240\1\237"+
    "\1\0\2\237\7\0\1\67\7\241\1\221\1\241\1\0"+
    "\2\241\10\0\7\241\1\221\1\241\1\0\2\241\10\0"+
    "\7\242\1\230\1\242\1\0\2\242\10\0\7\243\1\244"+
    "\1\243\1\0\2\243\10\0\7\245\1\0\1\245\1\0"+
    "\2\245\10\0\7\246\1\240\1\246\1\0\2\246\17\0"+
    "\1\221\23\0\1\230\14\0\7\247\1\244\1\247\1\0"+
    "\2\247\10\0\7\245\1\224\1\245\1\0\2\245\10\0"+
    "\7\250\1\0\1\250\1\0\2\250\10\0\7\251\1\240"+
    "\1\251\1\0\2\251\10\0\7\252\1\244\1\252\1\0"+
    "\2\252\10\0\7\253\1\0\1\253\1\0\2\253\17\0"+
    "\1\240\23\0\1\244\14\0\7\224\1\0\1\224\1\0"+
    "\2\224\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\10\1\1\11\2\1\6\0"+
    "\1\1\10\0\3\1\6\0\5\1\1\0\1\1\5\0"+
    "\1\1\1\0\4\1\1\0\2\1\6\0\4\1\3\0"+
    "\7\1\2\0\5\1\4\0\3\1\1\11\3\0\6\1"+
    "\3\0\1\1\2\0\5\1\1\0\1\1\3\0\2\1"+
    "\3\0\12\1\2\0\5\1\1\0\2\1\1\11\1\1"+
    "\3\0\3\1\2\0\2\1\1\0\1\1\3\0\2\1"+
    "\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HostsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 11: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 12: break;
          case 3: 
            { return HostsTypes.comment;
            } 
            // fall through
          case 13: break;
          case 4: 
            { return HostsTypes.end_line;
            } 
            // fall through
          case 14: break;
          case 5: 
            { yybegin(HOSTNAME); return HostsTypes.hspace;
            } 
            // fall through
          case 15: break;
          case 6: 
            { yybegin(HOSTNAME); return HostsTypes.comment;
            } 
            // fall through
          case 16: break;
          case 7: 
            { yybegin(YYINITIAL); return HostsTypes.end_line;
            } 
            // fall through
          case 17: break;
          case 8: 
            { yybegin(HOSTNAME); return HostsTypes.hostname_value;
            } 
            // fall through
          case 18: break;
          case 9: 
            { yybegin(HOSTNAME); return HostsTypes.IPv6;
            } 
            // fall through
          case 19: break;
          case 10: 
            { yybegin(HOSTNAME); return HostsTypes.IPv4;
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
